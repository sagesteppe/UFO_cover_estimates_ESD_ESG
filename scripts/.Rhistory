ECO.SITE = str_replace(ECO.SITE, 'AW-Saline_Bottoms_and_Bottoms',
'AW_Bottoms')
) %>%
distinct(.keep_all = T)
View(all_hits_nat)
View(all_hits_nat)
View(all_hits_nat)
distinct(all_hits_nat, PLOTID)
View(esg_plots)
View(site_esd)
esg_plots <- read.csv(file.path(praw, f[grep('ESG_unverified_plots', f)]) ) %>%
mutate(ESG = str_replace(ESG, '_-_', '-')) %>%
rename(PLOTID = 'PLOT.ID')
# we have to detect plots which were not correlated to an ESD, and need to
# use the ESG as a stand in for ecological site
site_esg <- site_esd %>%
filter(ECO.SITE == 'UNKNOWN') %>%
select(-ECO.SITE) %>%
left_join(., esg_plots, by = 'PLOTID') %>%
rename(ECO.SITE = ESG)
site_esd <- site_esd %>%
filter(!PLOTID %in% site_esg$PLOTID) #%>%
View(site_esd)
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.align="left")
library(tidyverse)
library(cowplot)
library(ggthemes)
library(hrbrthemes)
library(waffle)
library(sf)
praw <- '../data/raw'
ppro <-  '../data/processed'
f <- list.files(praw, pattern = 'csv')
files <- list.files(ppro, pattern = 'csv')
summary <- read.csv(file.path(praw, 'TerraDatVersionSummary.csv')) %>%
select(PrimaryKey, starts_with('AH'), Latitude_NAD83:Longitude_NAD83)
lpi <- read.csv( file.path(praw, 'LPIRAW.csv') ) %>%
select(PrimaryKey, RecKey, PointLoc:SoilSurface) %>%
mutate(across(.cols = TopCanopy:SoilSurface, ~ na_if(.x, ""))) %>%
pivot_longer(TopCanopy:SoilSurface, values_to = 'SYMBOL_AIM', names_to = 'Intercept') %>%
drop_na(SYMBOL_AIM) %>%
filter(SYMBOL_AIM != 'None', str_length(SYMBOL_AIM) >= 4)
attributes <- read.csv(file.path(ppro, files[grep('Attribute.*Table-RCB', files)]) )
lpi_sub <-  left_join(lpi, attributes, by = 'SYMBOL_AIM') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface'))) %>%
mutate(FUNCTIONAL2 = if_else(FUNCTIONAL == 'NonNoxSubShrubCover', 'NonNoxShrubCover', FUNCTIONAL)) %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL2) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits <- lpi_sub %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_sum <- all_hits %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL) %>%
summarize(Fractional_Cover = sum(NIntercepts))
all_hits_w <- all_hits_sum %>%
mutate(FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
pivot_wider(names_from = FUNCTIONAL, values_from = Fractional_Cover, values_fill = 0) %>%
mutate(NoxSubShrubCover = 0, NoxSucculentCover = 0, NoxTreeCover = 0)  %>%
mutate(across(where(is.numeric), ~ (./150)*100))
rm(all_hits, all_hits_sum, lpi_sub)
terradat_calc <- summary %>%
select(PrimaryKey, starts_with('AH')) %>%
pivot_longer(!PrimaryKey, names_to = 'Variable', values_to = 'Cover_TD') %>%
filter(Variable %in% c('AH_ForbCover', 'AH_GrassCover', 'AH_PerenGrassCover',
'AH_ShrubCover', 'AH_PerenForbCover', 'AH_NonNoxTreeCover',
'AH_PerenForbCover') ) %>%
mutate(Variable = str_remove(Variable, "AH_"),
Variable = str_remove(Variable, "Cover"),
Variable = str_remove(Variable, "NonNox"))
rm(summary)
# this calculates CORRECTLY, BUT !!! it seems that some things have
# not always been shrubs the entire time.
agg <- read.csv(file.path(praw, f[grep('Func_', f)]) ) %>%
filter(!FUNCTIONAL_AGGREGATE %in% c('PerenForb', 'PerenGrass'))
lpi_agg <- left_join(lpi, attributes, by = 'SYMBOL_AIM') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface')),
FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
left_join(., agg, by = 'FUNCTIONAL') %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL_AGGREGATE) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits_agg <- lpi_agg %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL_AGGREGATE) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_agg_sum <- all_hits_agg %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL_AGGREGATE) %>%
summarize(Cover_HB = sum(NIntercepts)) %>%
rename(Variable = FUNCTIONAL_AGGREGATE) %>%
mutate(across(where(is.numeric), ~ (./150)*100))
compare_agg <- inner_join(all_hits_agg_sum, terradat_calc, by = c('PrimaryKey', 'Variable')) %>%
mutate(across(where(is.numeric), ~ round(.x, 1)))
ggplot(data = compare_agg, aes(x = Cover_TD, y = Cover_HB)) +
geom_point() +
labs(title = 'Validation of Calculations',
x = 'TerrAdat (Standards)', y = 'In house') +
facet_wrap(~ Variable) +
theme_bw() +
theme(aspect.ratio = 1,
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey20", size = 8)) +
xlim(0,101) + ylim(0,101) +
scale_x_continuous(labels = paste0(seq(from = 0 , to = 100, by = 25), '%')) +
scale_y_continuous(labels = paste0(seq(from = 0 , to = 100, by = 25), '%')) +
geom_abline(intercept = 0, slope = 1, col = 'red')
off <- compare_agg %>%
rowwise %>%
filter(Cover_HB != Cover_TD) %>%
mutate(difference = abs(Cover_HB - Cover_TD))
pairs <- lapply(split(compare_agg, compare_agg$Variable), nrow) |>
data.frame()
all_cor <- lapply(split(compare_agg, compare_agg$Variable),
function(x) cor(x$Cover_HB, x$Cover_TD)) |>
data.frame()
mismatch_cor <- lapply(split(off, off$Variable),
function(x) cor(x$Cover_HB, x$Cover_TD)) |>
data.frame()
rm(agg, lpi_agg, all_hits_agg, all_hits_agg_sum, terradat_calc)
rm(off, compare_agg, mismatch_cor, all_cor, pairs)
native_esd_grps <- read.csv( file.path(praw, f[grep('native_esd_covers', f)]))
lpi_agg <- left_join(lpi, attributes, by = 'SYMBOL_AIM') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface')),
FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
left_join(., native_esd_grps, by = 'FUNCTIONAL') %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL_AGGREGATE) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits_nat <- lpi_agg %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL_AGGREGATE) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_nat <- all_hits_nat %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL_AGGREGATE) %>%
summarize(Cover_HB = sum(NIntercepts)) %>%
rename(Variable = FUNCTIONAL_AGGREGATE) %>%
mutate(across(where(is.numeric), ~ (./150)*100))
rm(attributes, native_esd_grps, lpi_agg, all_hits_agg, lpi)
all_hits_nat <- all_hits_nat %>%
drop_na(Variable) %>%
group_by(PrimaryKey) %>%
filter(n() <= 3) %>%
pivot_wider(names_from = 'Variable', values_from = 'Cover_HB', values_fill = 0) %>%
pivot_longer(!PrimaryKey, names_to = 'Variable', values_to = 'Cover_HB')
pts <- st_read(
'/media/sagesteppe/ExternalHD/aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T) %>%
st_transform(26913) %>%
st_buffer(55) %>%
select(PLOTID, STRATUM)
char <- read.csv(file.path(praw, f[grep('Characterization', f)] ) ) %>%
st_as_sf( coords = c('Longitude', 'Latitude'), crs = 4269) %>%
filter(str_detect(PrimaryKey, negate = T,
'Fuels|Bull-Draw|CO-NWD|_Tres_Rios|Grand_Junction|Gunnison|Moab|TRFO'),
str_detect(PlotID, '[A-Z]{2,3}-[0-9]{2,3}')) %>%
st_transform(26913) %>%
select(PrimaryKey)
esd_class <- read.csv( file.path(praw, f[grep('Tracking', f)]) ) %>%
filter(STATUS == 'SAMPLED') %>%
mutate(ECO.SITE = if_else(ECO.SITE.MATCHED == F, 'UNKNOWN', ECO.SITE)) %>%
select(PLOTID = PLOT.ID, ECO.SITE)
site_esd <- st_join(pts, char) %>%
drop_na(PrimaryKey) %>%
left_join(., esd_class, by = 'PLOTID') %>%
mutate(ECO.SITE = if_else(PLOTID == 'GR-035', 'R036XY114CO', ECO.SITE),
PLOTID = if_else(PLOTID == 'GR-035', 'GR-025', PLOTID))
rm(pts, char, esd_class)
benchmarks <- read.csv(file.path(praw, f[grep('Benchmark', f)])) %>%
select(-X, -RANGE)  %>%
mutate(SET = 'ESD')
esdM <- read.csv(file.path(praw, f[grep('modules', f)])) %>%
rbind(., data.frame(ESD = 'R036XY315UT',
module_name = 'PinyonJuniper',
module_number = 1))
# repeat for ESG and combine
esg_lkp_tab <- read.csv(file.path(praw, f[grep('ESG-Lookup', f)]))
lkp_abb <- data.frame(
Climate =
c('Arid_Warm', 'Semiarid_Cool',  'Semiarid_warm', 'No_Climate_Group'),
Abbrev = c('AW', 'SAC', 'SAW', "")
)
esg_cover <- read.csv(file.path(praw, f[grep('EcologicalSiteGroup', f)])) %>%
rowwise() %>%
mutate(Grass = sum(C3_Perennial_Grass, C4_Perennial_Grass)) %>%
select(Climate, SoilGeomorphicUnits, Grass, Forb, Shrub, Tree) %>%
left_join(., lkp_abb) %>%
unite('ESG', c('Abbrev', 'SoilGeomorphicUnits'), sep = '-') %>%
select(-Climate) %>%
mutate(ESG = str_remove(ESG, '^-'),
ESG = str_replace(ESG, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW-Sandy_Uplands_and_Loamy_Uplands'),
ESG = str_replace(ESG, 'SAC-Saline_Sandy_Loamy_Finer_Uplands',
'SAC-Finer_Uplands')
) %>%
left_join(., esg_lkp_tab)
# make long to bind together, combine both esd names and esg names
benchmarks_known_esd <- esg_cover %>%
pivot_longer(cols = Grass:Tree, values_to = 'COVER', names_to = 'COVER_TYPE')
benchmarks <- benchmarks_known_esd %>%
select(-ECO.SITE) %>%
rename(ECO.SITE = ESG) %>%
bind_rows(., benchmarks_known_esd) %>%
select(-ESG) %>%
mutate(ESTIMATE = 'LOWER', COVER_RANGE = 'ORIGINAL',
MEAN = as.numeric(COVER), SET = 'ESG')  %>%
filter(!ECO.SITE %in% benchmarks$ECO.SITE) %>%
bind_rows(., benchmarks) %>%
as.data.frame()
benchmarks <- drop_na(benchmarks, ECO.SITE)
rm(lkp_abb, esg_lkp_tab, benchmarks_known_esd)
esg_plots <- read.csv(file.path(praw, f[grep('ESG_unverified_plots', f)]) ) %>%
mutate(ESG = str_replace(ESG, '_-_', '-')) %>%
rename(PLOTID = 'PLOT.ID')
# we have to detect plots which were not correlated to an ESD, and need to
# use the ESG as a stand in for ecological site
site_esg <- site_esd %>%
filter(ECO.SITE == 'UNKNOWN') %>%
select(-ECO.SITE) %>%
left_join(., esg_plots, by = 'PLOTID') %>%
rename(ECO.SITE = ESG)
site_esd1 <- site_esd %>%
filter(!PLOTID %in% site_esg$PLOTID) #%>%
View(site_esd1)
201+44
181+44
View(site_esg)
View(esg_plots)
View(site_esd)
site_esd1 <- site_esd %>%
filter(!PLOTID %in% site_esg$PLOTID) %>%
bind_rows(site_esg, .) %>%
st_drop_geometry()
View(site_esd1)
all_hits_nat <- inner_join(site_esd, all_hits_nat) %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAC-Loamy_Uplands', 'SAC-Finer_Uplands'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW_Sandy_&_Loamy'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Shallow_and_Deep_Rocky',
'SAW_Shallow_&_Rocky'),
ECO.SITE = str_replace(ECO.SITE, 'AW-Shallow',
'AW-Very_Shallow')
)
site_esd <- site_esd %>%
filter(!PLOTID %in% site_esg$PLOTID) %>%
bind_rows(site_esg, .) %>%
st_drop_geometry()
all_hits_nat <- inner_join(site_esd, all_hits_nat) %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAC-Loamy_Uplands', 'SAC-Finer_Uplands'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW_Sandy_&_Loamy'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Shallow_and_Deep_Rocky',
'SAW_Shallow_&_Rocky'),
ECO.SITE = str_replace(ECO.SITE, 'AW-Shallow',
'AW-Very_Shallow')
)
View(all_hits_nat)
distinct(all_hits_nat, PLOTID)
View(all_hits_nat)
all_hits_nat <- filter(all_hits_nat, PrimaryKey %in% site_esd$PrimaryKey) %>%
drop_na(Variable)
all_hits_nat <- inner_join(site_esd, all_hits_nat) %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAC-Loamy_Uplands', 'SAC-Finer_Uplands'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW_Sandy_&_Loamy'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Shallow_and_Deep_Rocky',
'SAW_Shallow_&_Rocky'),
ECO.SITE = str_replace(ECO.SITE, 'AW-Shallow',
'AW-Very_Shallow')
)
View(all_hits_nat)
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.align="left")
library(tidyverse)
library(cowplot)
library(ggthemes)
library(hrbrthemes)
library(waffle)
library(sf)
praw <- '../data/raw'
ppro <-  '../data/processed'
f <- list.files(praw, pattern = 'csv')
files <- list.files(ppro, pattern = 'csv')
summary <- read.csv(file.path(praw, 'TerraDatVersionSummary.csv')) %>%
select(PrimaryKey, starts_with('AH'), Latitude_NAD83:Longitude_NAD83)
lpi <- read.csv( file.path(praw, 'LPIRAW.csv') ) %>%
select(PrimaryKey, RecKey, PointLoc:SoilSurface) %>%
mutate(across(.cols = TopCanopy:SoilSurface, ~ na_if(.x, ""))) %>%
pivot_longer(TopCanopy:SoilSurface, values_to = 'SYMBOL_AIM', names_to = 'Intercept') %>%
drop_na(SYMBOL_AIM) %>%
filter(SYMBOL_AIM != 'None', str_length(SYMBOL_AIM) >= 4)
attributes <- read.csv(file.path(ppro, files[grep('Attribute.*Table-RCB', files)]) )
lpi_sub <-  left_join(lpi, attributes, by = 'SYMBOL_AIM') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface'))) %>%
mutate(FUNCTIONAL2 = if_else(FUNCTIONAL == 'NonNoxSubShrubCover', 'NonNoxShrubCover', FUNCTIONAL)) %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL2) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits <- lpi_sub %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_sum <- all_hits %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL) %>%
summarize(Fractional_Cover = sum(NIntercepts))
all_hits_w <- all_hits_sum %>%
mutate(FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
pivot_wider(names_from = FUNCTIONAL, values_from = Fractional_Cover, values_fill = 0) %>%
mutate(NoxSubShrubCover = 0, NoxSucculentCover = 0, NoxTreeCover = 0)  %>%
mutate(across(where(is.numeric), ~ (./150)*100))
rm(all_hits, all_hits_sum, lpi_sub)
terradat_calc <- summary %>%
select(PrimaryKey, starts_with('AH')) %>%
pivot_longer(!PrimaryKey, names_to = 'Variable', values_to = 'Cover_TD') %>%
filter(Variable %in% c('AH_ForbCover', 'AH_GrassCover', 'AH_PerenGrassCover',
'AH_ShrubCover', 'AH_PerenForbCover', 'AH_NonNoxTreeCover',
'AH_PerenForbCover') ) %>%
mutate(Variable = str_remove(Variable, "AH_"),
Variable = str_remove(Variable, "Cover"),
Variable = str_remove(Variable, "NonNox"))
rm(summary)
# this calculates CORRECTLY, BUT !!! it seems that some things have
# not always been shrubs the entire time.
agg <- read.csv(file.path(praw, f[grep('Func_', f)]) ) %>%
filter(!FUNCTIONAL_AGGREGATE %in% c('PerenForb', 'PerenGrass'))
lpi_agg <- left_join(lpi, attributes, by = 'SYMBOL_AIM') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface')),
FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
left_join(., agg, by = 'FUNCTIONAL') %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL_AGGREGATE) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits_agg <- lpi_agg %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL_AGGREGATE) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_agg_sum <- all_hits_agg %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL_AGGREGATE) %>%
summarize(Cover_HB = sum(NIntercepts)) %>%
rename(Variable = FUNCTIONAL_AGGREGATE) %>%
mutate(across(where(is.numeric), ~ (./150)*100))
compare_agg <- inner_join(all_hits_agg_sum, terradat_calc, by = c('PrimaryKey', 'Variable')) %>%
mutate(across(where(is.numeric), ~ round(.x, 1)))
ggplot(data = compare_agg, aes(x = Cover_TD, y = Cover_HB)) +
geom_point() +
labs(title = 'Validation of Calculations',
x = 'TerrAdat (Standards)', y = 'In house') +
facet_wrap(~ Variable) +
theme_bw() +
theme(aspect.ratio = 1,
panel.grid.minor = element_blank(),
axis.text = element_text(color = "grey20", size = 8)) +
xlim(0,101) + ylim(0,101) +
scale_x_continuous(labels = paste0(seq(from = 0 , to = 100, by = 25), '%')) +
scale_y_continuous(labels = paste0(seq(from = 0 , to = 100, by = 25), '%')) +
geom_abline(intercept = 0, slope = 1, col = 'red')
off <- compare_agg %>%
rowwise %>%
filter(Cover_HB != Cover_TD) %>%
mutate(difference = abs(Cover_HB - Cover_TD))
pairs <- lapply(split(compare_agg, compare_agg$Variable), nrow) |>
data.frame()
all_cor <- lapply(split(compare_agg, compare_agg$Variable),
function(x) cor(x$Cover_HB, x$Cover_TD)) |>
data.frame()
mismatch_cor <- lapply(split(off, off$Variable),
function(x) cor(x$Cover_HB, x$Cover_TD)) |>
data.frame()
rm(agg, lpi_agg, all_hits_agg, all_hits_agg_sum, terradat_calc)
rm(off, compare_agg, mismatch_cor, all_cor, pairs)
native_esd_grps <- read.csv( file.path(praw, f[grep('native_esd_covers', f)]))
lpi_agg <- left_join(lpi, attributes, by = 'SYMBOL_AIM') %>%
mutate(Intercept = factor(
Intercept, c('TopCanopy', paste0(rep('Lower', 4), 1:4), 'SoilSurface')),
FUNCTIONAL = str_trim(FUNCTIONAL)) %>%
left_join(., native_esd_grps, by = 'FUNCTIONAL') %>%
group_by(PrimaryKey, RecKey, PointNbr, FUNCTIONAL_AGGREGATE) %>%
slice_max(order_by = Intercept,  n = 1, with_ties = F) %>%
ungroup()
all_hits_nat <- lpi_agg %>%
group_by(PrimaryKey, SYMBOL_USDA) %>%
add_count(SYMBOL_USDA, name = 'NIntercepts') %>%
select(PrimaryKey, SYMBOL_USDA, NIntercepts, SYMBOL_AIM, Intercept, FUNCTIONAL_AGGREGATE) %>%
distinct(PrimaryKey, SYMBOL_USDA, .keep_all = T)
all_hits_nat <- all_hits_nat %>%
ungroup() %>%
group_by(PrimaryKey, FUNCTIONAL_AGGREGATE) %>%
summarize(Cover_HB = sum(NIntercepts)) %>%
rename(Variable = FUNCTIONAL_AGGREGATE) %>%
mutate(across(where(is.numeric), ~ (./150)*100))
rm(attributes, native_esd_grps, lpi_agg, all_hits_agg, lpi)
all_hits_nat <- all_hits_nat %>%
drop_na(Variable) %>%
group_by(PrimaryKey) %>%
filter(n() <= 3) %>%
pivot_wider(names_from = 'Variable', values_from = 'Cover_HB', values_fill = 0) %>%
pivot_longer(!PrimaryKey, names_to = 'Variable', values_to = 'Cover_HB')
pts <- st_read(
'/media/sagesteppe/ExternalHD/aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T) %>%
st_transform(26913) %>%
st_buffer(55) %>%
select(PLOTID, STRATUM)
char <- read.csv(file.path(praw, f[grep('Characterization', f)] ) ) %>%
st_as_sf( coords = c('Longitude', 'Latitude'), crs = 4269) %>%
filter(str_detect(PrimaryKey, negate = T,
'Fuels|Bull-Draw|CO-NWD|_Tres_Rios|Grand_Junction|Gunnison|Moab|TRFO'),
str_detect(PlotID, '[A-Z]{2,3}-[0-9]{2,3}')) %>%
st_transform(26913) %>%
select(PrimaryKey)
esd_class <- read.csv( file.path(praw, f[grep('Tracking', f)]) ) %>%
filter(STATUS == 'SAMPLED') %>%
mutate(ECO.SITE = if_else(ECO.SITE.MATCHED == F, 'UNKNOWN', ECO.SITE)) %>%
select(PLOTID = PLOT.ID, ECO.SITE)
site_esd <- st_join(pts, char) %>%
drop_na(PrimaryKey) %>%
left_join(., esd_class, by = 'PLOTID') %>%
mutate(ECO.SITE = if_else(PLOTID == 'GR-035', 'R036XY114CO', ECO.SITE),
PLOTID = if_else(PLOTID == 'GR-035', 'GR-025', PLOTID))
rm(pts, char, esd_class)
benchmarks <- read.csv(file.path(praw, f[grep('Benchmark', f)])) %>%
select(-X, -RANGE)  %>%
mutate(SET = 'ESD')
esdM <- read.csv(file.path(praw, f[grep('modules', f)])) %>%
rbind(., data.frame(ESD = 'R036XY315UT',
module_name = 'PinyonJuniper',
module_number = 1))
# repeat for ESG and combine
esg_lkp_tab <- read.csv(file.path(praw, f[grep('ESG-Lookup', f)]))
lkp_abb <- data.frame(
Climate =
c('Arid_Warm', 'Semiarid_Cool',  'Semiarid_warm', 'No_Climate_Group'),
Abbrev = c('AW', 'SAC', 'SAW', "")
)
esg_cover <- read.csv(file.path(praw, f[grep('EcologicalSiteGroup', f)])) %>%
rowwise() %>%
mutate(Grass = sum(C3_Perennial_Grass, C4_Perennial_Grass)) %>%
select(Climate, SoilGeomorphicUnits, Grass, Forb, Shrub, Tree) %>%
left_join(., lkp_abb) %>%
unite('ESG', c('Abbrev', 'SoilGeomorphicUnits'), sep = '-') %>%
select(-Climate) %>%
mutate(ESG = str_remove(ESG, '^-'),
ESG = str_replace(ESG, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW-Sandy_Uplands_and_Loamy_Uplands'),
ESG = str_replace(ESG, 'SAC-Saline_Sandy_Loamy_Finer_Uplands',
'SAC-Finer_Uplands')
) %>%
left_join(., esg_lkp_tab)
# make long to bind together, combine both esd names and esg names
benchmarks_known_esd <- esg_cover %>%
pivot_longer(cols = Grass:Tree, values_to = 'COVER', names_to = 'COVER_TYPE')
benchmarks <- benchmarks_known_esd %>%
select(-ECO.SITE) %>%
rename(ECO.SITE = ESG) %>%
bind_rows(., benchmarks_known_esd) %>%
select(-ESG) %>%
mutate(ESTIMATE = 'LOWER', COVER_RANGE = 'ORIGINAL',
MEAN = as.numeric(COVER), SET = 'ESG')  %>%
filter(!ECO.SITE %in% benchmarks$ECO.SITE) %>%
bind_rows(., benchmarks) %>%
as.data.frame()
benchmarks <- drop_na(benchmarks, ECO.SITE)
rm(lkp_abb, esg_lkp_tab, benchmarks_known_esd)
esg_plots <- read.csv(file.path(praw, f[grep('ESG_unverified_plots', f)]) ) %>%
mutate(ESG = str_replace(ESG, '_-_', '-')) %>%
rename(PLOTID = 'PLOT.ID')
# we have to detect plots which were not correlated to an ESD, and need to
# use the ESG as a stand in for ecological site
site_esg <- site_esd %>%
filter(ECO.SITE == 'UNKNOWN') %>%
select(-ECO.SITE) %>%
left_join(., esg_plots, by = 'PLOTID') %>%
rename(ECO.SITE = ESG)
site_esd <- site_esd %>%
filter(!PLOTID %in% site_esg$PLOTID) %>%
bind_rows(site_esg, .) %>%
st_drop_geometry()
View(all_hits_nat)
View(site_esd)
all_hits_nat <- left_join(site_esd, all_hits_nat, by = 'PrimaryKey') %>%
mutate(ECO.SITE = str_replace(ECO.SITE, 'SAC-Loamy_Uplands', 'SAC-Finer_Uplands'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Sandy_Uplands_and_Loamy_Uplands',
'SAW_Sandy_&_Loamy'),
ECO.SITE = str_replace(ECO.SITE, 'SAW-Shallow_and_Deep_Rocky',
'SAW_Shallow_&_Rocky'),
ECO.SITE = str_replace(ECO.SITE, 'AW-Shallow',
'AW-Very_Shallow')
)
View(esg_plots)
View(site_esd)
